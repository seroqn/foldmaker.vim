*foldmaker.txt*	パターンとインデントを基にして|fold-expr|を生成する

Author  : seroqn
License : MIT license

==============================================================================

Vimの折り畳み機能 |fold.txt| の、式による折り畳み |fold-expr| を提供します。
正規表現パターンにマッチした行から折りたたみを開始して、折り畳みの終了はインデ
ントによって判断します。

該当するファイルタイプのファイルを開くと自動で 'foldmethod' が "expr" に、
'foldexpr' が foldmaker の関数に設定されます。

* 機能

- 特定のパターンにマッチする行から折り畳みを開始する
- ある折り畳み内にネストされているときのみ有効な折り畳みを生成する
- 特定のパターンが存在するなら折り畳みを終了させないで継続する
- 特定のパターンが出現しない限り他の要素を無視して継続し続ける折り畳みを生成す
  る(一階層のみ)

NOTE: うまく動かないときには 'debug' を "throw" にするとどこでエラーが出ている
のかがわかります。また、'foldexpr' 実行中は |echo| などは表示されないので、何
かをメッセージに残して確認したいときには 'debug' を "msg" にして |echoerr| を
仕込むと良いでしょう。
NOTE: バッファを最初に読み込んだ時には 'debug' が設定されていてもメッセージが
表示されないようです。また abort の関数であろうとエラーが発生しても中断されず
次の行から処理を再開するようです。

------------------------------------------------------------------------------
設定例						*foldmaker-setting*

|g:foldmaker| にファイルタイプをキーにして辞書を指定することで設定する。
コンテクストを指定することであるブロックの中だけで有効な折り畳みを作成できる。
method を "pylike" にすることで python のようなインデントブロックにも対応。
>
 let g:foldmaker#use_marker = 1

 let g:foldmaker = {}

 let g:foldmaker.python = {'fdtype': 'pylike',
   \ 'foldings': {
     \ 'function': {'start': '^\s*\%(async\s\+\)\?def\s'},
     \ 'class': {'start': '^\s*class\s'},
     \ }
   \ }

 let g:foldmaker.sh = {'foldings': {
   \ 'function': {'start': '^\s*\%(function\s\+\)\?\%([_[:alpha:]]\%(\w\|-\|:\)*\)\?()\s*{\s*$'},
   \ },}
 let g:foldmaker.bash = {'inherit': 'sh'}
 let g:foldmaker.zsh = {'inherit': 'sh'}

 let g:foldmaker.go = {'foldings': {
   \ 'function': {'start': '^\s*func[^(]'},
   \ 'type': {'start': '^\s*type\>'},
   \ },}

 let g:foldmaker.javascript = {'foldings': {
   \ 'function': {'start': '^\s*\%(export\%(\s\+default\)\?\s\+\)\?\%(async\s\+\)\?function\s\+[[:alnum:]$_]\+\s*(', 'nonstop': '^\s*[){]'},
   \ 'const-function': {'start': '\%(export\%(\s\+default\)\?\s\+\)\?\%(const\|let\|var\)\s\{-}[[:alnum:]$_]\+\s\{-}=\s\{-}\%(async\s\+\)\?\%(function\|\%(\w\+\|(\w*\%(,\s\{-}\%(\.\.\.\)\?\w\+\)*)\)\s\{-}=>\)\s\{-}{$', 'nonstop': '^\s*[){]'},
   \ 'class': {'start': '^\s*\%(export\%(\s\+default\)\?\s\+\)\?class', 'is_visible': 0},
   \ 'class-method': {'parents': ['class'], 'start': '^\s\{-}\%(export\%(\s\{1,}default\)\?\s\{1,}\)\?\%(\%(async\|static\)\s\+\)\?#\?\w\+(.\{-})\s\{-}{', 'nonstop': '^\s*[){]'},
   \ 'describe': {'start': '^\s\{-}describe('},
   \ 'document': {'start': '^\s*\V/**', 'stop': '\V*/'},
 \ },}

 let g:foldmaker.typescript = {'inherit': 'javascript', 'foldings': {
   \ 'function': {'start': '^\s*\%(export\%(\s\+default\)\?\s\+\)\?\%(async\s\+\)\?function\s\+[[:alnum:]$_]\+\s*\%(<.\{-}>\)\?(', 'nonstop': '^\s*[){]'},
   \ 'const-function': {'start': '\%(export\%(\s\+default\)\?\s\+\)\?\%(const\|let\|var\)\s\{-}[[:alnum:]$_]\+\s\{-}=\s\{-}\%(async\s\+\)\?\%(function\|\%(\w\+\|(\w*\%(,\s\{-}\%(\.\.\.\)\?\w\+\)*)\)\%(:\s\{-}\u\w\{-}\%(<.\{-}>\)\?\)\?\s\{-}=>\)\s\{-}{$', 'nonstop': '^\s*[){]'},
   \ 'class-method': {'parents': ['class'], 'start': '^\s\{-}\%(export\%(\s\{1,}default\)\?\s\{1,}\)\?\%(\%(public\|private\|protected\)\s\{1,}\)\?\%(readonly\s\{1,}\)\?\%(\%(async\|static\)\s\+\)\?#\?\w\+(.\{-})\s\{-}{', 'nonstop': '^\s*[){]'},
   \ },}


==============================================================================
変数						*foldmaker-variables*

g:foldmaker					*g:foldmaker*
	辞書, 既定: {}
	キーにファイルタイプ名、値に設定用辞書を設定する。
	設定用辞書は以下のキーと値を持てる。

	inherit			(文字列)
		ファイルタイプ名を指定する。それの設定を継承する。循環してはい
		けない。
		folding については各キーについて子に同じ名前のキーがあればそれ
		で上書きされる。
		javascript と typescript のように拡張関係にある言語や、sh,
		bash, zsh など同じ標準のもとで作られた言語に使用するとよい。

	fdtype			(文字列)
		折り畳みの終了方法を指定する。"samelevel" "pylike" のうちのい
		ずれか。
		- samelevel		* default
			開始行と同じかそれより浅いインデントを持つ行まで
			(例: JavaScript ほか多くの言語) >
			  function foo(arg) {   // <- fold first
			    ...some processes...
			  }                     // <- fold last
<		- pylike
			開始行と同じかそれより浅いインデントを持つ行の手前まで
			(空行は含まない)  (例: Python)

	foldings		(辞書)
		辞書をキーに持つ。その辞書のキーは任意の名前(folding設定名)だ
		が、"__" で始まる名前は予約されている。
		他のファイルタイプから inherit で foldings 定義を引き継いでい
		ない限りこれが空であることは許容されない。
		値は以下の要素である。

		- start			(文字列) * 必須
			その折り畳みを開始する正規表現文字列。空文字の場合無
			効。それ以外の何にでもマッチするパターン ('.' や '\S*'
			など) にするとエラーになる。
		- cancel		(文字列)
			正規表現文字列。start にマッチした行が同時にこのパター
			ンにもマッチするなら、折り畳みを生成しない。
		- nonstop		(文字列)
			正規表現文字列。このパターンにマッチする行は、それが折
			り畳み終了条件を満たしていても折り畳みを終了せずに継続
			する。
			先頭にマッチさせるときにはインデントを考慮したパターン
			にする必要がある: '^\s*//' のように。
			（これが同時に新たな折り畳みの開始にもなっている場合、
			終了時には親を含めて終了する)
		- stop			(文字列)
			正規表現文字列。これが空でなければ、この折り畳みはこの
			パターンによってのみ終了するようになり、この折り畳みが
			終了するまで新しく折り畳みが作られることがない。
			パターンは何かしらの非空白文字にマッチさせる必要があ
			る。nonstop はこの折り畳み定義では無視される。
		- parents		(文字列のリスト)
			リストには他の折り畳みの名前を指定する。定義されている
			ときこの折り畳みはその折り畳み直下でのみ有効になる
			(class の method など)。superiors の設定より優先され
			る。
		- superiors		(文字列のリスト)
			リストには他の折り畳みの名前を指定する。定義されている
			ときこの折り畳みはその折り畳み内でのみ有効になる
			(class の method など)。
		- is_visible		(数値; 既定: 1)
			これが 0 のとき、その折り畳みは作成されない。内部的に
			は存在しているように扱われているので、これを parents
			や superiors に持つ折り畳みはこれの中では作成される。
			また、stop と組み合わせることで、折り畳みが作成されな
			い領域を作ることもできる。


	use_marker		(数値)
		// 実験中機能
		非0 なら 'foldmarker' によって折り畳みを明示的に開始できる。
		複合ファイルタイプの場合、定義されていてる全てのこの値が 非0
		のとき有効になる。'foldmarker' とは違い、終了はインデントによ
		り判定される。|g:foldmaker#use_marker| 参照。
		全ファイルタイプで未定義の場合、|g:foldmaker#use_marker| の値
		が使われる。


g:foldmaker#use_foldmarker			*g:foldmaker#use_foldmarker*
	数値, 既定: 0
	非0 なら 'foldmarker' も折り畳みの開始・終了として併用する。
	既定の 'foldmarker' と比して以下の違いがある。
	- "{{{2" "}}}3" といった番号付きマーカーには対応しない。
	- 開始マーカーが複数あったり、元々折り畳みの開始となる行にさらに開始マ
	  ーカーを置いても折り畳みは累積しない。
	  (たとえば "{{{ {{{" とマーカーがあっても折り畳みが2層深くなることな
	   く、1層だけ深くなる。)
	- 折り畳みの終了は終了マーカーではなくインデント量で決定される。
	- 終了マーカーは折り畳み開始行にあるもののみ有効。
	  その行の折り畳み開始を打ち消すことにのみ使われる。


==============================================================================
vim:tw=78:ts=8:ft=help:fdm=manual:norl:noet:fen:
